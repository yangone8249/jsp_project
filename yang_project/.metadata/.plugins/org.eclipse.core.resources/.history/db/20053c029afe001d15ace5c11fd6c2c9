package controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.jdt.internal.compiler.parser.Parser;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.CommentVO;
import service.CommentService;
import service.CommentServiceImpl;


@WebServlet("/cmt/*")
public class CommentController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(CommentController.class);
	//목적지 주소로 보내는 destPage 쓰지 않는다. (board/detail.jsp에서 처리할것이기 때문에)
	//비동기 통신으로 요청이 온곳으로 돌려보냄
	private int isOk;
	private CommentService csv;

    public CommentController() {
        csv = new CommentServiceImpl();

    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		//contentType은 설정하지 않음. (ajex에서 사용예정)
		
		String uri = request.getRequestURI();
		log.info(">>> uri : "+uri);
		String pathUri = uri.substring("/cmt/".length());
		log.info(">>> pathUri : "+pathUri);
		String path = pathUri;
		String pathVar = "";
		
		if(pathUri.contains("/")) { //pathUri에서 /가 있다면 if문 진입
			path = pathUri.substring(0, pathUri.lastIndexOf("/")); // /path/를 출력 (마지막 /는 제거한다.)
			pathVar = pathUri.substring(pathUri.lastIndexOf("/")+1); //path... /숫자를 출력한다.
		}
		log.info(">>> path : "+path);
		log.info(">>> pathVar : "+pathVar);
		
		switch(path) {
		case "post":
			try {
				//js에서 보낸 데이터를 StringBuffer로 읽어들이는 작업.
				StringBuffer sb = new StringBuffer();
				String line = "";
				BufferedReader br = request.getReader(); //br에 댓글객체를 대입한다.
				while((line = br.readLine()) != null ) { //null이 아니라면 if문 진입 
					sb.append(line); //sb에 버퍼를 append한다.
				}
				log.info("sb : "+sb.toString());
				
				JSONParser parser = new JSONParser();
				JSONObject jsonObj = (JSONObject)parser.parse(sb.toString());
				//문자열을 json으로 변경한다. (JSONObject로 형변환)
				int bno = Integer.parseInt(jsonObj.get("bno").toString());
				//bno에 json객체안에 있는 bno를 정수로 대입한다.
				log.info("bno : "+bno);
				String writer = jsonObj.get("writer").toString(); //json객체의 writer를 문자열로 변경
				String content = jsonObj.get("content").toString(); //json객체의 content를 문자열로 변경
				CommentVO cvo = new CommentVO(bno, writer, content);
				log.info("cvo : "+cvo);
				isOk = csv.post(cvo);
				log.info("post : "+(isOk>0 ? "ok":"fail"));
				
				PrintWriter out = response.getWriter();
				out.print(isOk);
				
			} catch (Exception e) {
				log.info("comment Post error");
				e.printStackTrace();
			}
			break;
		case "list":
			try {
				int bno = Integer.parseInt(pathVar);
				List<CommentVO> list = csv.List(bno);
				log.info("comment List : DB ok");
				
				//json형태로 변환해서 printWriter한다.
				//List를 가져오기 때문에 jsonObject는 배열로 생성한다.
				JSONObject[] jsonObjArr = new JSONObject[list.size()]; //list사이즈만큼 배열 생성
				JSONArray jsonObjList = new JSONArray();
				for(int i=0; i<list.size(); i++) {
					jsonObjArr[i] = new JSONObject();
					jsonObjArr[i].put("cno", list.get(i).getCno());
					jsonObjArr[i].put("bno", list.get(i).getBno());
					jsonObjArr[i].put("writer", list.get(i).getWriter());
					jsonObjArr[i].put("content", list.get(i).getContent());
					jsonObjArr[i].put("regdate", list.get(i).getRegdate()); 
					
					jsonObjList.add(jsonObjArr[i]);
				}
				log.info("jsonObjList : "+jsonObjList);
				String jsonData = jsonObjList.toJSONString();
				log.info("jsonData : "+jsonData);
				
				PrintWriter out = response.getWriter();
				out.print(jsonData);
			} catch (Exception e) {
				log.info("comment List error");
				e.printStackTrace();
			}
			break;
		case "remove":
			try {
				int cno = Integer.parseInt(request.getParameter("cnoVal")); // 쿼리스트링 방식
				log.info("cno : "+cno);
				
				isOk = csv.remove(cno);
				log.info("remove isOk : "+((isOk>0)? "ok":"fail"));
				PrintWriter out = response.getWriter();
				
			} catch (Exception e) {
				log.info("comment remove error");
				e.printStackTrace();
			}
			break;
		case "modify":
			try {
				
			} catch (Exception e) {
				log.info("comment remove error");
				e.printStackTrace();
			}
			break;
		}
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		doGet(request, response);
	}

}
