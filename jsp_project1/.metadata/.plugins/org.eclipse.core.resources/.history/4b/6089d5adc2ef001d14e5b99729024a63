package controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import domain.ProductVO;
import service.ProductService;
import service.Service;


public class ProductController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	// CRUD구현
	// 컨트롤러 -> 서비스, 서비스 -> DAO, DAO -> DBconnection
	private Service svc;
	
    public ProductController() {
        // 생성자
        svc = new ProductService();
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		 // 주 작업 영역
		// get/ post 방식의 모든처리는 service에서 처리함.
		// post 방식으로 데이터 처리를 할 때 한글이 깨지는 것을 방지함.
		request.setCharacterEncoding("utf-8");
		request.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		
		String uri = request.getRequestURI();// 요청 경로(원하는 서비스) 컨트롤러주소/요청서비스
				// uri는 url보다 훨씬 폭넓은 의미를 뜻한다.
		System.out.println(">> uri :"+uri);
		String context = request.getContextPath(); //현재 요청하는 Project명
		System.out.println(">> context :"+context);
		
		// 객체를 보내야하는 목적지 주소
		String destPage="";
		
		//오는 요청에 대한 처리
		switch(uri) {
		case "/register.pd":
			// 경로 설정하는 방법 => /폴더명/jsp명
			destPage="/register.jsp";
			break;
		case "/insert.pd":
			//DB연결, 등록처리
			//jsp에서 가져온 객체(이름, 가격, 상세정보)를 가지고옴.
			//service에게 가져온 데이터를 객체화 하여, db에 저장해달라고 요청.
			//1. 객체를 생성한다.
			String pname = request.getParameter("pname");
			int price = Integer.parseInt(request.getParameter("price")); // 모든 getParameter는 String처리가 되므로, int로 변환해야한다.
			String madeby = request.getParameter("madeby");
			ProductVO pvo = new ProductVO(pname, price, madeby);
			
			//2. service에게 객체주고 요청
			int isOk = svc.register(pvo); //리턴값 1개의 행이 등록
			System.out.println(">>> 상품등록 : "+(isOk > 0 ? "성공":"실패"));
			
			break;
		case "/list.pd":
			List<ProductVO> list = new ArrayList<ProductVO>();
			
			list = svc.list();
			request.setAttribute("list", list);
			System.out.println(">>> 상품리스트 성공~!!");
			destPage = "/list.jsp";
			
			break;
		case "/detail.pd":
			int pno = Integer.parseInt(request.getParameter("pno")); //String을 int로 변환하기
			ProductVO p = new ProductVO();
			p = svc.detail(pno);
			request.setAttribute("pvo", p);
			System.out.println(">>> 상품상세 성공~!!");
			destPage = "/detail.jsp";
			
			break;
		case "/modify.pd":
			int pno = Integer.parseInt(request.getParameter("pno")); //String을 int로 변환하기
			ProductVO p = new ProductVO();
			p = svc.detail(pno);
			destPage = "/detail.jsp";
			break;
		
		}
	
		
		//웹의 목적지 주소로 연결해주는 객체
		//destPage로 이동 시 응답(요청) 객체를 싣고 가야한다.
		RequestDispatcher rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
		
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// get 방식으로 오는 값을 확인
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// post 방식으로 오는 값을 확인
		doGet(request, response);
	}

}
